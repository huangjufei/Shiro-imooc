<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <context:component-scan base-package="com.nevercome.shiroweb" />

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--登录跳转url,通过重写这个属性的值来修改默认login.jsp跳转的登录页面-->
        <property name="loginUrl" value="login.html"/>
        <!--未认证的跳转的url-->
        <property name="unauthorizedUrl" value="403.html"/>
        <!--
        anon：不需要任何认证，可以直接访问
        authBasic：HTTP
        authc：需要认证之后才可以访问
        user：需要当前存在用户才可以进行访问
        logout：退出
        -->
        <property name="filterChainDefinitions">
            <value>
                /login.html = anon
                /subLogin = anon
                <!--
                /testRole2 = roles["admin"]
                /testRole3 = rolesOr["admin", "admin1"]
                /testPerms = perms["admin:update"]
                /testPerms1 = perms["admin:update", "admin:add"]
                -->
                /* = authc
            </value>
        </property>
        <!--配置自定义的filter,项目中不常用-->
        <property name="filters">
            <util:map>
                <entry key="rolesOr" value-ref="rolesOrFilter" />
            </util:map>
        </property>
    </bean>
    <!--自定义的filter类,项目中不常用-->
    <bean class="com.nevercome.shiroweb.filter.RolesOrFilter" id="rolesOrFilter"/>

    <!--创建SecurityManager-->
    <bean class="org.apache.shiro.web.mgt.DefaultWebSecurityManager" id="securityManager">
        <!--注入realm-->
        <property name="realm" ref="realm"/>
        <!--如果需要缓存我们需要注入sessionManager,shiro会自动添加到缓存,主要针对的是会话-->
        <property name="sessionManager" ref="redisSessionManager" />
        <!--注入cacheManager,作用是少查数据库,主要针对的授权数据缓存-->
        <property name="cacheManager" ref="redisCacheManager"/>
        <!--注入cookieRememberManager-->
        <property name="rememberMeManager" ref="cookieRememberMeManager" />
    </bean>

    <bean class="com.nevercome.shiroweb.realm.CustomRealm" id="realm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher" id="credentialsMatcher">
        <!--加密算法-->
        <property name="hashAlgorithmName" value="md5"/>
        <!--加密次数-->
        <property name="hashIterations" value="1" />
    </bean>
    <!--自定义的sessionManager,可以使用默认的 org.apache.shiro.web.session.mgt.DefaultWebSessionManager-->
    <bean class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" id="redisSessionManager">
        <property name="sessionDAO" ref="redisSessionDao"/>
    </bean>
    <!--自定义的redis-->
    <bean class="com.nevercome.shiroweb.session.RedisSessionDao" id="redisSessionDao"/>

    <bean class="com.nevercome.shiroweb.cache.RedisCacheManager" id="redisCacheManager"/>
    <!--通过token 来完成不需要再次登录就可以访问的效果 rememberMe-->
    <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager" id="cookieRememberMeManager">
        <property name="cookie" ref="cookie"/>
    </bean>

    <bean class="org.apache.shiro.web.servlet.SimpleCookie" id="cookie">
        <constructor-arg value="rememberMe" />
        <property name="maxAge" value="60000" />
    </bean>
</beans>